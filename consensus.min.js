async function setup(){createCanvas(windowWidth,windowHeight),background(51),medium=new Medium,nodeList=createNodes(width/20,medium);for(let t=0;t<nodeList.length;t++)nodeList[t].run();for(;;)await medium.update(),await sleep(10)}async function draw(){background(51);for(let t=0;t<nodeList.length;t++)nodeList[t].display();for(let t=0;t<medium.messageList.length;t++)medium.messageList[t].displayPath();await sleep(100)}function randomColor(){let t=getRandomInt(0,3);return 0==t?color(0,random(100,255),random(100,255)):1==t?color(random(100,255),0,random(100,255)):color(random(100,255),random(100,255),0)}function sleep(t){return new Promise(e=>setTimeout(e,t))}function distanceBetweenTwoPoints(t,e){return dist(t.x,t.y,e.x,e.y)}function getRandomInt(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t)+t)}function createNodes(t,e){for(list=[],i=0;i<t;i++)list.push(new Node(e,i));for(i=0;i<t;i++)list[i].setNeighborhood(list);return list}function randomRecepient(t,e){let i,o;do{i=getRandomInt(0,e.length),i!=t&&(o=e[i])}while(i==t);return o}function arrangeInCircle(t){let e=height/2.3;for(let i=0;i<t.length;i++){let o=map(i,0,t.length,0,TWO_PI),s=createVector(e,0).rotate(o).add(createVector(width/2,height/2));t[i].position=s}}function arrangeInSquare(t){let e,i,o=Math.floor(t.length/4),s=10;for(e=0;e<4;e++)for(i=o*e;i<o*(e+1);i++)if(e%2==0){let r=createVector(i*s,e*o*s);t[i].position=r}else{let r=createVector(e*o*s,i*s);t[i].position=r}}function drawBezier(t,e,i,o){bezier(t.x,t.y,e.x,e.y,i.x,i.y,o.x,o.y)}class Medium{constructor(){this.messageList=[]}async send(t,e,i){this.messageList.push(new Message(t,e,i))}async update(){for(let t=0;t<this.messageList.length;t++)if(this.messageList[t].moveTowardsTarget(),this.messageList[t].arrived){let e=this.messageList.splice(t,1)[0];e.arrive(),0==this.messageList.length&&(this.messageList=[])}}}class Message{constructor(t,e,i){this.source=t,this.target=e,this.message=i,this.position=createVector(t.position.x,t.position.y),this.arrived=!1,this.radius=10,this.color=t.color,this.lerpFactor=0,this.lerpStep=.005,this.lerpPointOne=this.findControlPoint(),this.lerpPointTwo=this.findControlPoint(),this.isCurving=!1,this.preview=0,this.previewStep=.02,this.closing=0,this.closingStep=.02}moveTowardsTarget(){this.isCurving=!0,this.curvedMovement()}curvedMovement(){this.lerpFactor>=1&&(this.arrived=!0);let t=p5.Vector.lerp(this.source.position,this.lerpPointOne,this.lerpFactor),e=p5.Vector.lerp(this.lerpPointOne,this.lerpPointTwo,this.lerpFactor),i=p5.Vector.lerp(this.lerpPointTwo,this.target.position,this.lerpFactor),o=p5.Vector.lerp(t,e,this.lerpFactor),s=p5.Vector.lerp(e,i,this.lerpFactor);if(this.position=p5.Vector.lerp(o,s,this.lerpFactor),this.preview<1)this.preview+=this.previewStep;else{let t=(1-this.lerpFactor)/this.lerpStep,e=1/this.closingStep;t-e<=0&&this.closing<1&&(this.closing+=this.closingStep)}this.lerpFactor+=this.lerpStep}linearAccMovement(){let t=this.target.position.copy();t.sub(this.position);let e=t.copy();e.mag()/100<2?(e.normalize(),e.mult(2)):e.setMag(e.mag()/100),t.normalize(),t.mult(e.mag()),this.position.add(t),distanceBetweenTwoPoints(this.position,this.target.position)<=1&&(this.arrived=!0)}linearConstMovement(){this.position=p5.Vector.lerp(this.source.position,this.target.position,this.lerpFactor),this.lerpFactor+=this.lerpStep,this.lerpFactor>=1&&(this.arrived=!0)}findControlPoint(){let t=this.source.position,e=this.target.position,i=p5.Vector.lerp(t,e,random()),o=random()<=.5?createVector(i.y,-i.x):createVector(-i.y,i.x);do{o.normalize().mult(random(0,p5.Vector.dist(t,e))).add(i)}while(!this.isWithinBoundary(o));return o}isWithinBoundary(t){return t.x>0&&t.x<width&&t.y>0&&t.y<height}arrive(){this.target.receiveToMulticast(this)}display(){rectMode(CENTER),fill(this.color),noStroke();let t=this.getDerived(),e=t.heading();push(),translate(this.position),rotate(e+PI/2),triangle(0,-this.radius/2,this.radius/2,this.radius/2,-this.radius/2,this.radius/2),pop()}getDerived(){let t=this.lerpFactor,e=-3*Math.pow(t,2)+6*t-3,i=9*Math.pow(t,2)-12*t+3,o=-9*Math.pow(t,2)+6*t,s=3*Math.pow(t,2),r=p5.Vector.mult(this.source.position,e),n=p5.Vector.mult(this.lerpPointOne,i),h=p5.Vector.mult(this.lerpPointTwo,o),a=p5.Vector.mult(this.target.position,s),l=r.add(n).add(h).add(a);return l.normalize(),l}displayPath(){noFill(),this.color.setAlpha(30),stroke(this.color),strokeWeight(10),this.preview<1?this.drawBezierTo(this.preview):this.closing>0?this.drawBezierFrom(this.closing):this.drawMyBezier(),this.color.setAlpha(255)}drawMyBezier(){drawBezier(this.source.position,this.lerpPointOne,this.lerpPointTwo,this.target.position)}drawBezierFrom(t){let e=this.splitBezierAt(t);drawBezier(e.from[0],e.from[1],e.from[2],e.from[3])}drawBezierTo(t){let e=this.splitBezierAt(t);drawBezier(e.to[0],e.to[1],e.to[2],e.to[3])}splitBezierAt(t){let e=this.source.position.copy(),i=this.lerpPointOne.copy(),o=this.lerpPointTwo.copy(),s=this.target.position.copy(),r=p5.Vector.sub(i,e).mult(t).add(e),n=p5.Vector.sub(o,i).mult(t).add(i),h=p5.Vector.sub(s,o).mult(t).add(o),a=p5.Vector.sub(n,r).mult(t).add(r),l=p5.Vector.sub(h,n).mult(t).add(n),d=p5.Vector.sub(l,a).mult(t).add(a);return{to:[e,r,a,d],from:[d,l,h,s]}}drawBezierBetween(t,e){let i=1-t,o=1-e,s=this.source.position.copy(),r=this.lerpPointOne.copy(),n=this.lerpPointTwo.copy(),h=this.target.position.copy(),a=p5.Vector.mult(s,i*i),l=p5.Vector.mult(r,2*t*i),d=p5.Vector.mult(n,t*t),c=a.add(l).add(d),p=p5.Vector.mult(s,o*o),m=p5.Vector.mult(r,2*e*o),u=p5.Vector.mult(n,e*e),g=p.add(m).add(u),w=p5.Vector.mult(r,i*i),V=p5.Vector.mult(n,2*t*i),y=p5.Vector.mult(h,t*t),f=w.add(V).add(y),v=p5.Vector.mult(r,o*o),x=p5.Vector.mult(n,2*e*o),M=p5.Vector.mult(h,e*e),b=v.add(x).add(M),P=p5.Vector.mult(c,i).add(p5.Vector.mult(f,t)),T=p5.Vector.mult(c,o).add(p5.Vector.mult(f,e)),z=p5.Vector.mult(g,i).add(p5.Vector.mult(b,t)),B=p5.Vector.mult(g,o).add(p5.Vector.mult(b,e));drawBezier(P,T,z,B)}}class Node{constructor(t,e,i,o){null!=i&&null!=o||(i=random(20,width-20),o=random(20,height-20)),this.neighborhood=[],this.position=createVector(i,o),this.medium=t,this.index=e,this.diameter=20,this.color=randomColor(),this.messageBuffer=[],this.isRunning,this.counter=0,this.direction=createVector(),this.speed=2}async run(){let t=randomRecepient(this.index,this.neighborhood);0==this.index&&this.reliableMulticast(t.index,this.neighborhood)}async reliableMulticast(t,e){for(let i=0;i<e.length;i++)i!=this.index&&(this.medium.send(this,e[i],t),await sleep(1))}async receiveToMulticast(t){if(t.message==this.index){if(this.counter+=1,this.counter==this.neighborhood.length-1){let t=randomRecepient(this.index,this.neighborhood);this.reliableMulticast(t.index,this.neighborhood),this.counter=0}}else this.medium.send(this,this.neighborhood[t.message],t.message)}async receiveToRandomSingle(t){let e=randomRecepient(this.index,this.neighborhood);this.medium.send(this,e,t.message)}async receiveToRandomNeighbor(t){}setNeighborhood(t){this.neighborhood=t}display(){fill(this.color),noStroke(),ellipse(this.position.x,this.position.y,this.diameter,this.diameter)}move(){let t=.01;random(0,1)<.5?this.direction.x+=random(-t,t):this.direction.y+=random(-t,t),this.direction.normalize().mult(this.speed),this.position.add(this.direction),(this.position.x<=0||this.position.x>=width)&&(this.direction=createVector(-this.direction.x,this.direction.y)),(this.position.y<=0||this.position.y>=height)&&(this.direction=createVector(this.direction.x,-this.direction.y))}}