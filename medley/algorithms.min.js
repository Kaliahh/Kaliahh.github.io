async function BubbleSort(e){for(let t=0;t<e.length;t++)for(let t=0;t<e.length-1;t++)e[t].value>e[t+1].value&&await swap(e,t,t+1)}async function CycleSort(e){writes=0;for(let t=0;t<e.length-1;t++){await sleep(40);let a=e[t],l=t;for(let n=t+1;n<e.length;n++)e[n].value<a.value&&l++;if(l!=t){for(;a.value==e[l].value;)l++;for(await cycleSwap(e[l],a),writes++;l!=t;){l=t;for(let n=t+1;n<e.length;n++)e[n].value<a.value&&l++;for(;a.value==e[l].value;)l++;await cycleSwap(e[l],a),writes++}}}return writes}async function cycleSwap(e,t){await sleep(5),console.log(e);let a=e;e=t,t=a}async function GnomeSort(e){let t=0;for(;t<e.length;)0==t||e[t].value>=e[t-1].value?t++:(await swap(e,t,t-1),t--)}async function GnomeSortOpt(e){for(let t=1;t<e.length;t++)await GSort(e,t)}async function GSort(e,t){let a=t;for(;a>0&&e[a-1].value>e[a].value;)await swap(e,a-1,a),a--}async function HeapSort(e){await Heapify(e,e.length);let t=e.length-1;for(;t>0;)await swap(e,t,0),t--,await SiftDown(e,0,t)}async function Heapify(e,t){let a=iParent(t-1);for(;a>=0;)await SiftDown(e,a,t-1),a--}async function SiftDown(e,t,a){let l=t;for(;iLeftChild(l)<=a;){let t=iLeftChild(l),n=l;if(e[n].value<e[t].value&&(n=t),t+1<=a&&e[n].value<e[t+1].value&&(n=t+1),n==l)return;await swap(e,l,n),l=n}}function iParent(e){return floor((e-1)/2)}function iLeftChild(e){return 2*e+1}function iRightChild(e){return 2*e+2}async function InsertionSort(e){for(let t=1;t<e.length;t++)for(let a=t;a>0&&e[a-1].value>e[a].value;a--)await swap(e,a,a-1)}async function MergeSort(e,t,a){if(await sleep(10),t<a){let l=floor((t+a)/2),n=e[l];await Promise.all([MergeSort(e,t,l),MergeSort(e,l+1,a)]),await Merge(e,t,l,a,n)}}async function Merge(e,t,a,l,n){await sleep20();let o=a-t+1,i=l-a,r=[],f=[];for(let a=0;a<o;a++)r[a]=e[t+a];for(let t=0;t<i;t++)f[t]=e[a+1+t];let u=0,s=0,c=t;for(;u<o&&s<i;)await sleep2(),r[u].value<=f[s].value?(e[c]=r[u],setFreq(osc1,u++)):(e[c]=f[s],setFreq(osc2,s++)),c++;for(;u<o;)await sleep2(),e[c]=r[u],setFreq(osc1,u++),c++;for(;s<i;)await sleep2(),e[c]=f[s],setFreq(osc2,s++),c++}async function OddEvenSort(e){let t=!1,a=e.length-2,l=e.length%2==0?0:1;for(;!t;)t=!0,await Promise.all([EvenOddHelper(e,l,!0),EvenOddHelper(e,a,!1)]).then(e=>{t=e[0]&&e[1]})}async function EvenOddHelper(e,t,a){let l=!0;for(let n=t;a?n<=e.length-2:n>=1;a?n+=2:n-=2)await sleep20(),(a?e[n].value>e[n+1].value:e[n].value<e[n-1].value)&&(setFreq(a?osc2:osc1,n),fastSwap(e,n,a?n+1:n-1),l=!1);return l}function fastSwap(e,t,a){let l=e[t];e[t]=e[a],e[a]=l}async function QuickSort(e,t,a){if(t<a){let l=await Partition(e,t,a);await Promise.all([QuickSort(e,t,l-1),QuickSort(e,l+1,a)])}}async function Partition(e,t,a){let l=t,n=e[a].value;for(let o=t;o<a;o++)e[o].value<n&&(await swap(e,o,l),l++);return await swap(e,l,a),l}async function SelectionSort(e){for(let t=0;t<e.length-1;t++){let a=t;for(let l=t+1;l<e.length;l++)e[l].value<e[a].value&&(a=l);a!=t&&await swap(e,a,t)}}async function ShellSort(e){let t=[701,301,132,57,23,10,4,1];for(k=0;k<t.length;k++)for(i=t[k];i<e.length;i++){await sleep20(),setFreq(osc1,i);let a,l=e[i];for(a=i;a>=t[k]&&e[a-t[k]].value>l.value;a-=t[k])await sleep20(),e[a]=e[a-t[k]],setFreq(osc2,a);e[a]=l}}